#!@PERL@ -T
# @configure_input@
#
# $Id: artfl_pole.pl.plin,v 2.11 2004/07/08 18:07:14 o Exp $
#
# philologic 2.8 -- TEI XML/SGML Full-text database engine
# Copyright (C) 2004 University of Chicago
# 
# This program is free software; you can redistribute it and/or modify
# it under the terms of the Affero General Public License as published by
# Affero, Inc.; either version 1 of the License, or (at your option)
# any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# Affero General Public License for more details.
# 
# You should have received a copy of the Affero General Public License
# along with this program; if not, write to Affero, Inc.,
# 510 Third Street, Suite 225, San Francisco, CA 94107 USA.

$PHILOSITECFG = "@sysconfdir@/philologic";

$dbname = $ARGV[5];

do "$PHILOSITECFG/dbnames";

$SYSTEM_DIR=$dbnames{"$dbname"};

$ENV{PATH} = "/bin:/usr/bin"; # this may be overridden from $PHILOSITECFG/philologic.cfg

do "$PHILOSITECFG/philologic.cfg";

unshift (@INC, $SYSTEM_DIR . "lib");
require "philosubs.pl";
my $cloud;
if ($SHOWTAGCLOUD) {
    eval { require HTML::TagCloud; } ;
    $cloud = eval { HTML::TagCloud->new(); } ;
}
$POLETEMPFILE = "$PHILOTMP/poletest." . $$;

$CONTEXT = $ARGV[0]; 
$WORDS    = $ARGV[1]; 

$hitsize = $CONTEXT * 2 + $WORDS * 4;
$unpack = "s" . $CONTEXT . "l" . $WORDS;

$hitlist = $ARGV[2];

#$polespan = $ARGV[3] - 1;
$polespan = $ARGV[3];

if ($polespan < 1) {
	$polespan = 5;
	} 

if ($polespan > 10) {
        $polespan = 5;
        }

$filteroff = $ARGV[4];
if ($filteroff eq "OFF") {
	$usefilter = "";
	}
else {
	$usefilter = 1;
}

if (!$NUMOFHITS) {
	$NUMOFHITS = 99;
	}

open (P, $SYSTEM_DIR . "pagemarks");
@p = <P>;

$|=1;

$REPORT_WIDTH = 200;  
 
$half         = $REPORT_WIDTH / 2;
 
$maxhead      = 20;
$cntxt        = 300;

$lastdoc      = -1;

$CONTEXTUALIZER = "$PHILOCGI/contextualize_";
$GETOBJECT      = "$PHILOCGI/getobject_";

$hithighon_kwic = "<b>";
$hithighoff_kwic = "</b>";
 
$citefile       = "$SYSTEM_DIR/docinfo";

open (TFILE, $citefile);

while (<TFILE>) 
  {
      chop;
      ($filename, $dl, $cite, $rest) = split (" ", $_, 4);
      push (@filenames, $filename); 
      push (@citebuffer, $cite);
      push (@doclengths, $dl);
  } 

close TFILE;




open (TFILE, "$hitlist");

if ( defined ( $start ) ) {
    seek (TFILE, $start * $hitsize, 0);
}

# removed titles generator startup

while ( ($hit = &GetHit) && ($counter < $finish + 1) ) {
    @o = unpack ($unpack, $hit); 
    undef (@index); 
    for ( $i = 0; $i < $CONTEXT; $i++ ) {
          push (@index, shift (@o)); 
       }

    $doc = shift @index; 
    $pc = pop @index;
    push ( @docs, $doc ) if ($#docs < 0 || $docs[$#docs] != $doc); 
    @o = sort numerically @o;

# page number:

    $pagenum = $pc <= $p[0] ? $pc : $p[$pc - $p[0]]; 
    $pagenum =~ s/[ \n]*$//;

    $pagenum_length = length ($pagenum);

    ###################
    #
    # Context:
    #
    ###################

    #
    # $lo and $ro -- left and right offsets;
    # $ll and $rl -- left and right lengths;
    # $dl -- total document length
    #

        $dl = $doclengths [$doc];
    
	$lo = $o[0] - $cntxt;
	$ro = $o[0]; # + $l;
        $rl = ($o[$#o] + $cntxt > $dl) ? $dl - $ro : $o[$#o] + $cntxt - $ro;


    # Some necessary corrections just in case we don't have enough context,
    # for ex., if the word is at the very beginning of the document:
  
        $lo = $lo < 0 ? 0 : $rl < $cntxt ? ($lo - ($cntxt - $rl)) : $lo;

	open (TEXT, $SYSTEM_DIR . "TEXTS/" . $filenames [$doc]); 

	seek (TEXT, $lo, 0);
	read (TEXT, $textbuffer, $ro + $rl - $lo);

        $left = substr ($textbuffer, 0, $o[0] - $lo);
	if (defined(&PoleTransform)) {
		$left = &PoleTransform($left);
		}
	else {
        	$left = &Transform($left);
	}
	@leftwords = split (/ /,$left);
	$mvolength = scalar(@leftwords) - 1;
	$lpolespan = $polespan - 1;
	$mvolen1 = $mvolength - $lpolespan;
	for $xx ($mvolen1..$mvolength) {
		$leftcount++;
		$w = $leftwords[$xx]; 

            if ($w =~ /;$/) {
                if ($w =~ /\&[a-z]*;;/) {
                   $w =~ s/(\&[a-z]*;);$/$1/;
                    }
                elsif ($w =~ /\&[a-z]*;$/) {
                    $dummy = 0; 
                    }
                else {
                   $w =~ s/;$//;
                }
            }   

			
		if ($w =~/[a-z\200-\377]/) {
			$leftfreq{$w}++;
			$allfreq{$w}++;
		    }
		}
#	print "||";
        $right = "";
        $right_length = 0;

        push (@o, $ro + $rl);


        $i = 0;

        while ( $i < $#o && $right_length < $half )
	{
	    $span = substr ($textbuffer, $o[$i] - $lo, $o[$i+1] - $o[$i]);

	    $span_length = length($span);

	    if ( $right_length + $span_length > $half - 1 )
	       {
		   $span = substr ( $span, 0, $half - 1 - $right_length);
	       }
		     
	    $right_length += ( $span_length + 1 );
	    if (defined(&PoleTransform)) {
		$span = &PoleTransform($span);
		}
	    else {
	    	$span = &Transform($span);
		}

       if (defined(&PoleSpan)) {
		$span = &PoleSpan($span);
		}	
	else {
       $span =~ s:([^\177-\340a-zA-Z0-9&;\(\)\]\[\{\}\']):$hithighoff_kwic$1:; 
	}

       $right .= ( $hithighon_kwic . $span );
	    $i++;
	}
	$right =~ s/<b>([^<]*)<\/b>//;
	$keyword = $1;

        if ($keyword =~ /;$/) {
            if ($keyword =~ /\&[a-z]*;;/) {
                $keyword =~ s/(\&[a-z]*;);$/$1/;
                }
            elsif ($keyword =~ /\&[a-z]*;$/) {
		 $dummy = 0; 
                 }
	    else {
                $keyword =~ s/;$//;
                }
         }


	$freqkey{$keyword}++;
	
        @rightwords = split (/ /,$right);
        for $xx (1..$polespan){
		$rightcount++;
	        $w = $rightwords[$xx];
            if ($w =~ /;$/) {
                if ($w =~ /\&[a-z]*;;/) {
                   $w =~ s/(\&[a-z]*;);$/$1/;
                    }
                elsif ($w =~ /\&[a-z]*;$/) {
                    $dummy = 0; 
                    }
                else {
                   $w =~ s/;$//;
                }
            }   


		if ($w =~/[a-z\200-\377]/) {
                	$rightfreq{$w}++;
			$allfreq{$w}++;
			}
                }

	$mvohitcount++;

}

# Load filter words
if ($usefilter){
	open (FILTERWRDS, $SYSTEM_DIR . "lib/cluster.filter.wrds");
	while ($filterword = <FILTERWRDS>) {
		$filterword =~ s/\n//;
		$fwordc++;
		@filterwrds{$filterword} = 1;
		}
	close (FILTERWRDS);
}

#foreach $word (sort keys(%freqkey)) {
#       push (@KEYWRDS, "$word $freqkey{$word}\n");
#        }

$leftc = $leftcount / $mvohitcount;

open (FOO, "| sort -rn > $POLETEMPFILE");

if ($usefilter){
	foreach $word (sort keys(%leftfreq)) {
		if (@filterwrds{$word} lt 1) {
			print FOO "$leftfreq{$word} $word\n";
			}
		}
	}
else {
	foreach $word (sort keys(%leftfreq)) {
		print FOO "$leftfreq{$word} $word\n";
                        }
}
close (FOO);
open (FOO, $POLETEMPFILE);
while ($fred = <FOO>) {
	push (@LEFT, $fred);
	}
close (FOO);


$rightc = $rightcount / $mvohitcount;
open (FOO, "| sort -rn > $POLETEMPFILE");
if ($usefilter) {
	foreach $word (sort keys(%rightfreq)) {
		if (@filterwrds{$word} lt 1) {
        		print FOO "$rightfreq{$word} $word \n";
			}
		}
	}
else {
	foreach $word (sort keys(%rightfreq)) {
		print FOO "$rightfreq{$word} $word \n";
                        }
	}

close (FOO);
open (FOO, "$POLETEMPFILE");
while ($fred = <FOO>) {
	push (@RIGHT, $fred);
        }
close (FOO);

$allc = ($rightcount + $leftcount) / $mvohitcount;
open (FOO, "| sort -rn > $POLETEMPFILE");
if ($usefilter) {
	foreach $word (sort keys(%allfreq)) {
        	if (@filterwrds{$word} lt 1) {
                	print FOO "$allfreq{$word} $word \n";
			if ($cloud) {
			    $cloud->add($word, "", $allfreq{$word});
			}
                	}
		}
	}
else {
	foreach $word (sort keys(%allfreq)) {
		print FOO "$allfreq{$word} $word \n";
		if ($cloud) {
		    $cloud->add($word, "", $allfreq{$word});
		}
		}
	}
close (FOO);
open (FOO, "$POLETEMPFILE");
while ($fred = <FOO>) {
        push (@ALLLR, $fred);
        }
close (FOO);

system ("rm $POLETEMPFILE");

print $philomessage[210]; 
$keyout = "";
foreach $word (sort keys(%freqkey)) {
        $keyout .=  $word . " (" . $freqkey{$word} . "), ";
        }
$keyout =~ s/, $//;
print $keyout;


print "<p>";

if ($usefilter) {
	print "<b>" . sprintf($philomessage[211], $fwordc)  . "</b><br>\n";
	}
else {
	print "<b>" . $philomessage[212] . "</b><br>\n";
	}
#print "<p>";
#print "Within $leftc Words to Left only &nbsp;&nbsp;&nbsp;&nbsp;";
#print "Within $rightc Words to Right only &nbsp;&nbsp;&nbsp;&nbsp;";
#print "Within $allc Words";
print "<p>\n";
# print "<table style=\"width:450px; float:left; border:solid 1px black;\">\n";
print "<table border style=\"width:450px; float:left;\">\n";
# print "<tr><td align=center><b>" . $philomessage[213] . "</b></td>\n";
print "<tr><td align=center>&nbsp;</td>\n";
$allcxxx = $allc / 2;
print "<td align=center><b>" . sprintf($philomessage[214], $allcxxx) . "</b></td>\n";
#print "<td>&nbsp;</td>";
#print "<td align=center><b>". $philomessage[213]. "</b></td>\n";
print "<td align=center><b>" . sprintf($philomessage[215], $leftc) . "</b></td>\n";
#print "<td>&nbsp;</td>";
#print "<td align=center><b>". $philomessage[213]. "</b></td>\n";
print "<td align=center><b>" . sprintf($philomessage[216], $rightc) . "</b></td>\n";
print "</tr>\n";

for $i (0..$NUMOFHITS) {
	print "<tr>\n";
	$z = $i + 1;
        print "<tr><td align=center><b>$z</b></td>\n";
        ($bfw1, $bfw2) = split(/ /,$ALLLR[$i]);
        print "<td>$bfw2 ($bfw1)</td>\n";
#        print "<td>&nbsp;</td>";
#	print "<td align=center><b>$z</b></td>\n";
	($lfw1, $lfw2) = split(/ /,$LEFT[$i]);
	print "<td>$lfw2 ($lfw1)</td>\n";
#        print "<td>&nbsp;</td>";
#	print "<td align=center><b>$z</b></td>\n";
	($rfw1, $rfw2) = split(/ /,$RIGHT[$i]);
        print "<td>$rfw2 ($rfw1)</td>\n";
	print "</tr>\n";
}
print "</table>\n";
if ($cloud) {
    $cloudtext = $cloud->html_and_css(200);
    $cloudtext =~ s/<a.*?>(.*?)<\/a>/$1/g;
    print "<div style=\"width:40%; position:inline; float:right;\">\n";
    print $cloudtext;
    print "</div>";
}
print "<div style=\"width:100%; clear:both;\"></div>";
##########################
###   a few subs:
##########################

sub Transform {
    local($bf) = $_[0];
    $bf=~s/<[^>]*>/ /g;
    $bf=~tr/\012/ /;
    $bf=~tr/A-Z/a-z/;
    $bf=~s/-/ /g;
    $bf=~s/[^a-z&;'\177-\344 ]/ /g;
    $bf=~s/&dot;/ /g;
    $bf=~s/&nbsp;/ /g;
    $bf=~s/&amp;/ /g;
    $bf=~s/&.aquo;/ /gi;
    $bf=~s/&.squo;/ /gi;
    $bf=~s/&ldquo;/ /gi;
    $bf=~s/&rdquo;/ /gi;
    $bf=~s/&mdash;/ /gi;
    $bf=~s/&lt;/ /gi;
    $bf=~s/&gt;/ /gi;
    $bf=~s/\&hyphen;/ /gi;
    $bf=~s/\&colon;/ /gi;
    $bf=~s/\&excl;/ /gi;
    $bf=~s/"/ /g;
    $bf=~s/-/ /g;
    $bf=~s/ +/ /g;
    $bf=~s/^  *//;
    $bf=~s/  *$//; 
    $bf=~s/\'/\' /g;
    return $bf;
}


sub GetHit {
    local($str);
 
    read (TFILE, $bufstr, 1024 * $hitsize) unless $readinit % 1024;

    $str = substr ($bufstr, $readinit++ % 1024 * $hitsize, $hitsize);
    return $str;
}


sub TagTail {
local ($database) = $_[0];

    return $database . "." . join (".", @o);
}

sub numerically { $a <=> $b }


