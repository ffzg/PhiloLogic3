# $Id: textload.cfg
# -----------------------------------------------------------------------
# philologic 2.8 -- TEI XML/SGML Full-text database engine
# Copyright (C) 2004 University of Chicago
# 
# This program is free software; you can redistribute it and/or modify
# it under the terms of the Affero General Public License as published by
# Affero, Inc.; either version 1 of the License, or (at your option)
# any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# Affero General Public License for more details.
# 
# You should have received a copy of the Affero General Public License
# along with this program; if not, write to Affero, Inc.,
# 510 Third Street, Suite 225, San Francisco, CA 94107 USA.

# textload configuration file.  
# Last Modified: MVO March 22 2005.
# ----------------------------------------------------------------------


# ============ ARGS which come from loader configuration ===========
# Set 1 = ON   0 = OFF.  Other values vary.  
#
# --------------------- Set Apostrophe Break ------------------------
# Set to 1 to break words on apostrophe.  Probably 0 for
# English, 1 for French.  Your milage may vary.
$breakapost = 1;  

# ------------------------ Define Word Pattern ----------------------
# What word pattern do you want to use?  This is important.
# We will want to add optional characters like {[]} for MSS 
# notation and then set a function to delete these for the index 
# in order to search across them.  [Note, leave "_" in the
# second pattern to handle tags in words, etc., see below]  
$CHARSINWORD = "[\&A-Za-z0-9\177-\377][\&A-Za-z0-9\177-\377\_\';]*";
# $CHARSINWORD = "[\&A-Za-z0-9\177-\377][\&A-Za-z0-9\^\|\~\+\177-\377\_\';]*";

# ------------- Define Characters to Exclude from Index words -------
# Leading to a second list, characters which can be in words
# but you don't want to index.  
$CHARSNOTTOINDEX = "\[\{\]\}";
# $CHARSNOTTOINDEX = "[\|\^\+\~]";          # EEBOTCP

# ------------- UTF8 Strings to consider as word breakers -----------
# In SGML, these are ents.  But in Unicode, these are characters
# like any others.  Consult the table at:
# www.utf8-chartable.de/unicode-utf8-table.pl?start=8016&utf8=dec&htmlent=1
# to see about others.
$HaveUnicodeWordBreakers = 1;
@UnicodeWordBreakers = ('\xe2\x80\x93', # U+2013 &ndash; EN DASH
                        '\xe2\x80\x94', # U+2014 &mdash; EM DASH
			'\xc2\xab',     # &laquo;
                        '\xc2\xbb',     # &raquo;
                        '\xef\xbc\x89', # fullwidth right parenthesis
                        '\xef\xbc\x88', # fullwidth left parenthesis
                        '\xe2\x80\x90', # U+2010 hyphen for greek stuff
                        '\xce\x87',     # U+00B7 ano teleia
                        '\xe2\x80\xa0', # U+2020 dagger
                        '\xe2\x80\x98', # U+2018 &lsquo; LEFT SINGLE QUOTATION
                        '\xe2\x80\x99', # U+2019 &rsquo; RIGHT SINGLE QUOTATION
                        '\xe2\x80\x9c', # U+201C &ldquo; LEFT DOUBLE QUOTATION
                        '\xe2\x80\x9d', # U+201D &rdquo; RIGHT DOUBLE QUOTATION
                        '\xe2\x80\xb9', # U+2039 &lsaquo; SINGLE LEFT-POINTING ANGLE QUOTATION
                        '\xe2\x80\xba', # U+203A &rsaquo; SINGLE RIGHT-POINTING ANGLE QUOTATION
                        '\xe2\x80\xa6'  # U+2026 &hellip; HORIZONTAL ELLIPSIS
                       );

# ----------------------- Get Multiple Div Heads --------------------
# Set to 0 to include only the first <div <head in the divlevel metadata
# and tables of contents.  Set to 1 or more to get COUNT of multiple
# Div Heads.  Set to 0 or 1 normally.
$GetMultipleDivHeads = 1;

# ------------------------ Dump Object Table ------------------------
# SQL div table set, which dumps out a tab delimited line
# of div level info, philo id, etc.  See below.  Leave this on.
$printsqldivtable = 1;

# ------------------------ Dump SubDiv Object Table -----------------
# SQL div table set, which dumps out a tab delimited line
# of subdiv level info, philo id, etc.  Experimental.  The idea is
# to generate a table of para level objects, like stage directions
# and the like in order to search these.  See below.  Leave this on.
$printsqlsubdivtable = 1;

# ------------------------ Generate Document Word Counts ------------
# Turn this on to generate a document word count.  This will be
# used in future for the PhiloLogic frequency package, giving
# users word counts for documents, and possibly for z-score statistical
# analysis.
$genworddocfreq = 1;

# ----------------------- Tag Upper Case Characters -----------------
# Tag upper case.  This used to be for proper names, but we have
# used it to tag upper case.   Leave it off unless you really need it.
# Should be expanded to handle <name tags.
$taguppercasewords = 0;

# ---------------------- Treat Lines as Sentences --------------------
# In linegroups, break sentence objects on </l> and turns off
# automatic sentence recognition.  Normally off.  
$lngrpbreaksent = 0;

# ---------------------- Flatten Ligatures for Indexing --------------
# Convert SGML ligatures to base characters for indexing.  
# &oelig; = oe.  Leave this on.  At one point we should think
# Unicode, but who knows if this is important.
$flattenligatures = 1;

# --------------------- Ignore recursive text divs -------------------
# Ignore divs in internal texts.  This is for constructs which
# quoted <q objects as new <text objects.  I have to admit
# that recursive arguments make sense at a certain level, but 
# violate my notion of documentary structures.  Recursion is a
# great programming technique, but as a data representation it 
# makes things hard.  Leave this ON.
$ignoredivsinsubtext = 1;

# ---------------------- SubDiv Look Ahead --------------------------
# When looking ahead to see if you have an immediate lower div,
# set how many lines to look.  A real XML parser would not need this.
$LOOKHOWFAR = 10;

# ---------------------- Div Head Look Ahead ------------------------
# In a <div, how far to look ahead for a <head.  A real XML parser
# would not need this.
$HEADLOOKLINES = 7;

# ------------------ Skip in word tags -------------------------------
# Tags normally break words.  There may be exceptions.  To run the 
# exception, turn on the exception and list them as patterns.  
# Tags will not be indexed and will not break words.
$tagexception = 1;
@listofexempttags = ('<hi[^>]*>',
                     '<emph[^>]*>',
		     '<\/hi>',
		     '<\/emph>',
		     '<orig[^>]*>',
                     '<\/orig>',
		     '<sic[^>]*>',
                     '<\/sic>',
		     '<abbr[^>]*>',
                     '<\/abbr>',
		      );
# This is ugly. I am doing this by looking for these tags with a letter
# before and after, changing them to "_" and after I get the
# word, deleting "_".  Leave it off unless you really need it.
# Note that you need to construct valid perl patterns.  

# ------------------- Dump XPATHS in div and subdiv tables ---------------
# This is experimental.  Not sure that I have any immediate use,
# by might as well do it now.  You COULD contextualize to these
# using an XML widget.  Leave at 0 unless you REALLY need it.
# And obviously, your document must be XML, valid, well formed,
# not to mention polite and well groomed....
$DUMPXPATHS = 0;
if (!$printsqlsubdivtable && $printsqlsubdivtable) {
	$DUMPXPATHS = 0;              # Where are you going to dump 'em to?
	}
if ($DUMPXPATHS) {
	$tagexception = 0;   # You don't want to dump XPATHS with this on
}                            # because it screws with some of the tagging.

# -------------------- Ignore DIV0 -----------------------------------
# <div0  These are used at time to be the root level, often to
# include the entire document.  Let's give the option to simply
# ignore them.  Leave it off unless you see div problems, where your
# top level div is the whole body or text.
$ignoredivzero = 0;

# ------------------- Build ID reference table -----------------------
# Build table for handling elements with IDs.   Leave it on.
$BUILDREFIDTABLE = 1;

# ------------------- Tags and Words to Ignore ------------------------
# Ignore tags and words.  This is a switch and list of tag/word
# patterns to change to spaces and ignore.  Reason: the information
# in the tags are not to be search.  These really should be 
# milestones ... but the general point may be useful. Calls TagWordDel
# The listtoignore must be valid patterns.
$ignoretagswords = 1;
@listtoignore = ('<mw[^>]*>[^<]*<\/mw>',
                 '<A DUMMY TO HOLD THE LIST END>');

# ------------------ Hyphenated Word Joiner ----------------------------
# Softhypen word joiner.  At this time, I'm trying to join
# words broken by &shy;\n and possibly some additional
# selected tags.  Could be extended.  Calls JoinHyphenWords
$joinshywords = 1;

# ------------------ Abbreviation Expander for Indexing. ---------------
# This is to handle abbreviation tags.  I have seen two types:
#       <abbr expan="en">&emacr;</abbr>
#       <abbr expan="Valerius Maximus">Val. Max.</abbr>
# For now, lets's try the first.  Calls subroutine AbbrevExpand
$abbrevexpand = 1;

# ----------------- Get Div opener and closer values -------------------
# This is to add DIV level opener and closer values to the DIV index.
# Should be left on once it is tinkered with
$GetDivOpenClose = 1;

#  ----------------- Set Long Word Limit  -------------------
#  Words greater than 235 characters (bytes) cause an indexing
#  error.  This sets a limit.  Words are then truncated to fit.
$LONGWORDLIMIT = 200;

# ------------------  And a Trap at the end to make sure ---------------
# that we really did do it.....
$ReadTextLoadCfg = 1;

1;


