#include "retreive.h"

Z32 filter_single_entry ( Search s, N8 bn, Word w, N32 n, Gmap map, Gmap res )
{
  Z32 status;

  Z32 *map_ptr;
  Z32 *res_ptr; 
  
  map_ptr = gm_get_cur_pos ( map ); 

  while ( s->hit_def->levels[bn].h2m_cmp_func ( map_ptr, (Z32 *)&w->dir[n], s->hit_def, bn) < 0 )
    {
      if ( !gm_inc_pos ( map ) ) 
	return RETR_BLK_CLEAN | RETR_END_OF_MAP;

      map_ptr = gm_get_cur_pos ( map ); 
    }

  if ( s->hit_def->levels[bn].h2m_cmp_func ( map_ptr, (Z32 *)&w->dir[n], s->hit_def, bn) > 0 ) 
    return RETR_BLK_CLEAN; 

  while (!s->hit_def->levels[bn].h2m_cmp_func (map_ptr, (Z32 *)&w->dir[n], s->hit_def, bn))
    {
      res_ptr = gm_get_eod ( res ); 
      status |= hit_put ( (Z32 *)&w->dir[n], map_ptr, res_ptr, s, bn );  
      gm_inc_eod ( res ); 

      map_ptr += map->gm_f;
    }

  return status; 
}


Z32 process_single_entry ( Search s, N8 bn, Word w, N32 n, Gmap map, Gmap res )
{
  Z32 *res_ptr;
  Z32  status;
  
  if ( map ) 
    status = filter_single_entry ( s, bn, w, n, map, res );
  else 
    {
      res_ptr = gm_get_eod ( res ); 
      status |= hit_put ( &w->dir[n], NULL, res_ptr, s, bn );  
      gm_inc_eod ( res ); 
    }

  status |= RETR_BLK_CLEAN;

  return status; 

}

/* single entry -- done */ 

/* hit blocks: */

Z32 load_hits ( Search s, hit *hits, Z32 howmany, Gmap res )
{
  Z32  ctr; 
  Z32 *res_ptr;
  Z32  status;

  s_log ( s->debug, L_INFO, "loading %d hits w/out filtering", (Z8 *)howmany ); 

  for ( ctr = 0; ctr < howmany; ctr++ )
    {
      res_ptr = gm_get_eod ( res ); 
      status = hit_put ( (Z32 *)&hits[ctr], NULL, res_ptr, s->hit_def, 0 );

      if ( status != res->gm_f )
	{
	  s_log ( s->debug, L_ERROR, 
		  "wrong number (%d) of indices put on the map", (Z8 *)status);
	  return RETR_BUMMER;
	}
      else
	status = 0;

      gm_inc_eod ( res ); 
    }

  if ( res->gm_eod >= s->batch_limit )
    status = RETR_RESMAP_FULL; 

  return status;
}



Z32 filternload_hits ( Search s, N8 bn, Word w, N32 n, Gmap map, hit *hits, Z32 howmany, Gmap res )
{
  Z32 status = 0; 
  Z32 put_status = 0; 

  Z32 *map_ptr;
  Z32 *res_ptr;
  Z32  ctr;       

  Z8 logmesg[256];

  /* 
     OK, here's the logic of what we are doing: 

     we have a block ("hits") of <howmany> hits; we also have a map, 
     either a search corpus, or search results from the previous 
     level. We only need the hits that match the objects on 
     the map (based on the search criteria, hitcmp_func/hitcmp_obj);
   */

  s_log ( s->debug, L_INFO, "filtering; search map position: %d", (Z8 *)map->gm_c ); 

  for ( ctr = 0; ctr < howmany; ctr++ )
    {
      map_ptr = gm_get_cur_pos ( map ); 

      /*
	so, first we FF the map until we find an object that is 
	actually "larger" (based on our comparison function) than
	the next hit on the block;
      */

      while ( s->hit_def->levels[bn].h2m_cmp_func ( map_ptr, (Z32 *)&hits[ctr], s->hit_def, bn ) )
	{
	  while ( s->hit_def->levels[bn].h2m_cmp_func ( map_ptr, (Z32 *)&hits[ctr], s->hit_def, bn ) < 0 )
	    {

	      s_log ( s->debug, L_INFO, "comparing; (map position %d);", (Z8 *)map->gm_c ); 
	      sprintf ( logmesg, "%d %d %d %d %d %d", map->gm_h[(map->gm_c*map->gm_f)],
			map->gm_h[(map->gm_c*map->gm_f+1)],
			map->gm_h[(map->gm_c*map->gm_f+2)],
			map->gm_h[(map->gm_c*map->gm_f+3)],
			map->gm_h[(map->gm_c*map->gm_f+4)],
			map->gm_h[(map->gm_c*map->gm_f+5)]);
	      s_log ( s->debug, L_INFO, "current map element: %s", logmesg ); 
	      sprintf ( logmesg, "%d %d %d %d %d %d", hits[ctr].index[0],
			hits[ctr].index[1],
			hits[ctr].index[2],
			hits[ctr].index[3],
			hits[ctr].index[4],
			hits[ctr].index[5] );
	      s_log ( s->debug, L_INFO, "current hit: %s", logmesg ); 


	  /* 
	     of course, if we've reached the end of the map before
	     we found any matching hits, that means there's nothing
	     of interest for us in this block. However, we *can't return*
	     just yet -- even though there's nothing in the block we 
	     could use right away, there might be hits in it that 
	     will match something on another map in the next iteration --
	     i.e., if this is only a partial map.
	  */
	      
	      if ( !gm_inc_pos ( map ) ) 
		{
		  status |= RETR_END_OF_MAP;
		  s_log ( s->debug, L_INFO, NULL, "END OF MAP reached while filtering;" ); 
		  break;
		}
	      
	      map_ptr = gm_get_cur_pos ( map ); 
	    }

	  s_log ( s->debug, L_INFO, "FF-ed the search map to position %d;", (Z8 *)map->gm_c ); 
	  sprintf ( logmesg, "%d %d %d %d %d %d", map->gm_h[(map->gm_c*map->gm_f)],
		    map->gm_h[(map->gm_c*map->gm_f+1)],
		    map->gm_h[(map->gm_c*map->gm_f+2)],
		    map->gm_h[(map->gm_c*map->gm_f+3)],
		    map->gm_h[(map->gm_c*map->gm_f+4)],
		    map->gm_h[(map->gm_c*map->gm_f+5)]);
	  s_log ( s->debug, L_INFO, "current map element: %s", logmesg ); 


	  if ( status & RETR_END_OF_MAP )
	    break;

	  /* 
	     and now we have to FF the hit list until we find an hit
	     that's less or equal than the current map object; thus, 
	     continuing alternating between these 2 loops, we are going
	     to either find a match, or reach the end of either the map
	     or the hit block. 
	  */

	  while ( s->hit_def->levels[bn].h2m_cmp_func ( map_ptr, (Z32 *)&hits[ctr], s->hit_def, bn ) > 0 )
	    {
	      s_log ( s->debug, L_INFO, NULL, "FF-ing the hitlist;" );
	      sprintf ( logmesg, "%d %d %d %d %d %d", hits[ctr].index[0],
			hits[ctr].index[1],
			hits[ctr].index[2],
			hits[ctr].index[3],
			hits[ctr].index[4],
			hits[ctr].index[5] );
	      s_log ( s->debug, L_INFO, "current hit: %s", logmesg ); 
	      ctr++; 
	      
	      /* 
		 again, if we have reached the end of the block before
		 we found an exact match -- there's nothing (left) for us
		 in this block and it is safe to mark the block as "clean".
	       */
		  
	      if ( ctr == howmany )
		{
		  s_log ( s->debug, L_INFO, NULL, "REACHED THE END OF HITBLOCK;" );
		  status |= RETR_BLK_CLEAN;
		  break;
		}
	    }

	  if ( status & RETR_BLK_CLEAN )
	    break;

	}

      if ( ( status & RETR_END_OF_MAP ) || ( status & RETR_BLK_CLEAN ) )
	break;

      /* 
	 And now, the matches. Note, that more than one element from 
	 the map that matches this hit! For example, we are searching
	 for co-occurences of "a" and "the"; the map already contains
	 3 different occurences of "a" in this sentence. The hit for 
	 "the" that we have just found makes *3* co-occurences with
	 the 3 hits above. Of course, if there's another "the" in the 
	 sentence, then it makes 3 more cooccurences with those 3, 
	 so while we are packing these hits away, we don't want to 
	 FF the map permanently -- we have to start from this spot 
	 with the next hit from the list in the next iteration.
       */
	  
      while ( !s->hit_def->levels[bn].h2m_cmp_func ( map_ptr, (Z32 *)&hits[ctr], s->hit_def, bn ) )
	{
	  s_log ( s->debug, L_INFO, NULL, "found a match;" );
	  s_log ( s->debug, L_INFO, "hit number %d;", (Z8 *)ctr );
	  s_log ( s->debug, L_INFO, "map position %d;", (Z8 *)map->gm_c );
	  s_log ( s->debug, L_INFO, NULL, "getting the EOD from the Result list..." );
	  res_ptr = gm_get_eod ( res ); 

	  s_log ( s->debug, L_INFO, "res. EOD = %d; putting hit on the map...", ((Z32)res_ptr - (Z32)res->gm_h)/(sizeof(Z32)*(res->gm_f)) );
	  s_log ( s->debug, L_INFO, "(BTW: result map gm_eod is set to %d)", res->gm_eod );

	  put_status = hit_put ( (Z32 *)&hits[ctr], map_ptr, res_ptr, s->hit_def, bn );  
	  s_log ( s->debug, L_INFO, "hit put; status %d.", (Z8*)put_status );

	  gm_inc_eod ( res ); 
	      
	  map_ptr += map->gm_f;
	}
      /* the search map will be rewound during the next loop iteration; */
      /* let's rewind the map: */
      /* map_ptr = gm_get_cur_pos ( map ); */

    }

  /* 
     If we have finished the entire hitblock, depending on how it 
     happened (whether the last hit in the block was a match or not)
     we might have not detected the fact; so let's check again:
   */

  if ( ctr == howmany )
    {
      s_log ( s->debug, L_INFO, NULL, "REACHED THE END OF HITBLOCK;" );
      status |= RETR_BLK_CLEAN;
    }

  if ( res->gm_eod >= s->batch_limit )
    status |= RETR_RESMAP_FULL; 

  /* let's see if we've got any unprocessed hits left: */

  if ( howmany - ctr )
    {
      w->blk_cached = n; 
      
      w->n_cached   = howmany - ctr; 
      w->cached     = (hit *) malloc ( w->n_cached * sizeof( hit ) ); 

      /*
	copy_hits ( w->cached, hits, ctr, w->n_cached ); 
       */

      memcpy ( w->cached, &hits[ctr], sizeof(hit) * w->n_cached ); 

      status |= RETR_HITS_CACHED;
    }
  
  return status; 

}

hit *
retreive_hit_block ( Search s, N8 bn, Word w, N32 n, Gmap map, Z32 *howmany )
{
  Z32 status;
  Z32 *map_ptr;
  Z32 map_pos;
  
  hit *hits;

  s_log ( s->debug, L_INFO, "retreive_hit_block: entry %d", (Z8 *)n ); 
  s_log ( s->debug, L_INFO, "retreive_hit_block: document %d", (Z8 *)((w->dir)[n].index[0]) ); 

  if ( map )
    {
      map_pos = map->gm_c; 
      s_log ( s->debug, L_INFO, "retreiving; search map position: %d", (Z8 *)map_pos ); 

      map_ptr = gm_get_cur_pos ( map ); 

      /* 
	 if the whole block is completely beyond the map boundary,
	 we are nor interested in it at all: 
       */

      while ( s->hit_def->levels[bn].h2m_cmp_func ( map_ptr, (Z32 *)&w->dir[n], s->hit_def, bn) < 0 )
	{
      /*
	 big fat warning!! if the above IS the case, we SHOULDN't discard
	 this block; we should simply stop searching, 
	 but this blockunit should be kept for next iteration (unless
	 the batch is completely done... 
       */
	 
	  if ( !gm_inc_pos ( map ) ) 
	    return (hit *)-1;

	  map_ptr = gm_get_cur_pos ( map ); 
	}

      /* 
	 if it's completely below, we don't need it either...
       */

      if ( n < w->blkcount - 1 
	   && 
	   s->hit_def->levels[bn].h2m_cmp_func 
	   ( map_ptr, (Z32 *)&w->dir[n+1], s->hit_def, bn) > 0 )
	{
	  w->offset+=BLK_SIZE;
	  return NULL;
	}
      
      /* rewind the map back to where we started searching: */

      gm_set_pos ( map, map_pos ); 
      
    }
  else
    {
      s_log ( s->debug, L_INFO, NULL, "retreiving; (no map)" ); 
    }
	    
  hits =  gethits ( w->type, (w->dir)[n], w->offset, howmany );
  w->offset+=BLK_SIZE;

  return hits; 
  
}

hit *
retreive_cached_hits ( Search s, N8 bn, Word w, N32 n, Gmap map, Z32 *howmany )
{
  hit *hits;
  Z32 *map_ptr;
  Z32 map_pos;

  if ( map )
    {
      map_pos = map->gm_c; 
      s_log ( s->debug, L_INFO, "retreiving cached; search map position: %d", (Z8 *)map->gm_c );      

      map_ptr = gm_get_cur_pos ( map ); 

      /* 
	 if the whole block is completely beyond the map boundary,
	 we are not interested in it at all: 
       */

      while ( s->hit_def->levels[bn].h2m_cmp_func ( map_ptr, (Z32 *)&w->cached[0], s->hit_def, bn) < 0 )
	{
	  if ( !gm_inc_pos ( map ) ) 
	    return (hit *) -1;

	  map_ptr = gm_get_cur_pos ( map ); 
	}

      /* 
	 if it's completely below, we don't need it either...
       */
      
      if ( n < w->blkcount - 1 
	   && 
	   s->hit_def->levels[bn].h2m_cmp_func 
	   ( map_ptr, (Z32 *)&w->dir[n+1], s->hit_def, bn) > 0 )
	return NULL;

      /* rewind the map back to where we started searching: */
      
      gm_set_pos ( map, map_pos ); 
      
    }
  else
    {
      s_log ( s->debug, L_INFO, NULL, "retreiving; (no map)" ); 
    }

  hits          = w->cached; 
  *howmany      = w->n_cached;

  w->n_cached   = 0;
  w->cached     = NULL;
  w->blk_cached = -1;

  return hits;
}

Z32 process_hit_block ( Search s, N8 bn, Word w, N32 n, Gmap map, Gmap res )
{
  Z32 status;
  Z32 howmany; 

  hit *hits;

  /* 
     before we do anything else, we should check if we have cached hits
     stored in this block:
   */

  if ( w->n_cached )
    {
      s_log ( s->debug, L_INFO, "found %d stored hits; processing.", (Z8 *)n ); 
      /* 
	 this is not supposed to happen: 
	 we should never get to another (next?) block while we still
	 have indices cached from this one!
       */
      if ( w->blk_cached != n )
	return SEARCH_BUMMER_OCCURED;
      
      hits = retreive_cached_hits ( s, bn, w, n, map, &howmany ); 
    }
  else
    {
      s_log ( s->debug, L_INFO, "retreiving hit block for entry %d;", (Z8 *)n ); 
      hits = retreive_hit_block ( s, bn, w, n, map, &howmany ); 
      s_log ( s->debug, L_INFO, "%d hits retreived;", (Z8 *)howmany ); 
    }

  if ( ! hits )
    {
      s_log ( s->debug, L_INFO, NULL, "no matching hits found in the block; marking the block clean; returning."); 
      return RETR_BLK_CLEAN;
    }
  
  if ( hits == (hit *) -1 )
    {
      s_log ( s->debug, L_INFO, NULL, "retreive_hit_block returned -1; END_OF_MAP reached; returning." ); 
      return RETR_END_OF_MAP;
    }

  if ( map )
    {
      s_log ( s->debug, L_INFO, NULL, "filtering the retreived hits against the search map;" ); 
      status = filternload_hits ( s, bn, w, n, map, hits, howmany, res ); 
      s_log ( s->debug, L_INFO, "ATTENTION: filternload returned %d;", (Z8*)status ); 

    }
  else
    /* load the whole block on the result map! */
    {
      s_log ( s->debug, L_INFO, NULL, "loading the hits retreived without filtering;" ); 
      status = load_hits ( s, hits, howmany, res );
      status |= RETR_BLK_CLEAN;
    }

  free ( hits ); 

  return status;
}



Z32 process_block_unit ( Search s, N8 bn, Word w, N32 n, Gmap map, Gmap res )
{
  N8  type = w->type; 

  /* what kind of blockunit is it? */
  if ( type ) 
    /* a block of hits? */
    {
      s_log ( s->debug, L_INFO, "block unit processing: entry %d;", (Z8 *)n ); 
      return process_hit_block ( s, bn, w, n, map, res );
    }
  else
    /* or a single low-freq word? */
    return process_single_entry ( s, bn, w, n, map, res );

}



N32 retreive_hits ( Search s, N level, Gmap map, Gmap res )
{
  Batch b = s->batches + level; 

  Word w = b->blockmap[b->blkmapctr].w; 
  N32  n = b->blockmap[b->blkmapctr].n; 

  Z32  status; 

  s_log ( s->debug, L_INFO, "retreive: level %d,", (Z8 *)level ); 
  s_log ( s->debug, L_INFO, "retreive: blockmap counter %d,", (Z8 *)b->blkmapctr ); 
  s_log ( s->debug, L_INFO, "retreive: dir. number in the block object %d;", (Z8 *)n ); 

  status = process_block_unit ( s, level, w, n, map, res );

  s_log ( s->debug, L_INFO, "process_block_unit returned %d;", (Z8 *)status );

  if ( status & RETR_BUMMER )
    return SEARCH_BUMMER_OCCURED;

  /* 
     smart, although the blockmap manipulations below should 
     probably be done in search.c:
   */

  if ( status & RETR_BLK_CLEAN )
    b->blkmapctr++; 

  else if ( status & RETR_HITS_CACHED )
    {
      s_log ( s->debug, L_INFO, NULL, "retreive_hits: pass finished; (hits stored!)" );
      if ( s->batches[level].howmany > 1 )
	blockmap_sort ( s, level ); 
    }

  if ( status & RETR_RESMAP_FULL )
    return RETR_RESMAP_FULL;

  if ( status & RETR_END_OF_MAP )
    {
      s_log ( s->debug, L_INFO, NULL, "retreive_hits: end of map reached; returning." );
      return RETR_END_OF_MAP;
    }

  s_log ( s->debug, L_INFO, NULL, "returning 0" );

  return 0;
}












